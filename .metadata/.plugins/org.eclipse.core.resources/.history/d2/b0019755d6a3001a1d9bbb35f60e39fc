package com.ibm.productservice.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.ibm.productservice.domain.Conversion;
import com.ibm.productservice.domain.Product;
import com.ibm.productservice.dto.ConversionDTO;
import com.ibm.productservice.dto.ConversionMApper;
import com.ibm.productservice.dto.ProductDTO;
import com.ibm.productservice.dto.ProductMapper;
import com.ibm.productservice.repository.ProductRepository;

@Service
public class ProductService {
	
	@Autowired
	ProductRepository productRepository;
	
//	final RestClient restClient;
//	
//	@Autowired
//	public ProductService(RestClient restClient) {
//		this.restClient=restClient;
//	}
	
	public ProductDTO getProductById(Long id) {
		Optional<Product> product= productRepository.findById(id);
		ProductDTO productDTO=null;
		if(product.isPresent()) {
			
			ProductMapper mapper=new ProductMapper();
			 productDTO=mapper.convertProductToProductDTO(product.get());
//			 Long tax= restClient.getTax(productDTO.getProductName());
//			 productDTO.setTax(tax);
		}
		
		return productDTO;
	}

	public ProductDTO createProduct(ProductDTO dto) {
		
		ProductMapper mapper=new ProductMapper();
		Product product= mapper.convertProductDTOToProduct(dto);
		
		Product product1= productRepository.save(product);
		       return mapper.convertProductToProductDTO(product1);
		
	}
	
	public void deleteProduct(Long id) {
		productRepository.delete(productRepository.findById(id).get());
		
	}
	
	public ProductDTO getProductByName(String name) {
		Product product=productRepository.findByProductName(name);
		ProductMapper mapper=new ProductMapper();
		return mapper.convertProductToProductDTO(product);
		
	}

	public HttpStatus addFactor(ConversionDTO dto) {
		// TODO Auto-generated method stub
		 productRepository.save(conversion);
		 
		 ConversionMApper mapper=new ConversionMApper();
			Conversion conversion= mapper.convertConversionDTOToConversion(dto);
			
			Product product1= productRepository.save(product);
			       return mapper.convertProductToProductDTO(product1);
		
		return null;
	}
}
