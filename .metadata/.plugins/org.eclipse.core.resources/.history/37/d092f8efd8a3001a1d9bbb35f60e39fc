package com.ibm.productservice.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ibm.productservice.domain.Conversion;
import com.ibm.productservice.domain.Product;
import com.ibm.productservice.dto.ConversionDTO;
import com.ibm.productservice.dto.ConversionMApper;
import com.ibm.productservice.dto.ProductDTO;
import com.ibm.productservice.dto.ProductMapper;
import com.ibm.productservice.repository.MS1Repository;
import com.ibm.productservice.repository.ProductRepository;

@Service
public class MS1Service {

	@Autowired
	ProductRepository productRepository;
	
	@Autowired 
	MS1Repository repo;

//	final RestClient restClient;
//	
//	@Autowired
//	public ProductService(RestClient restClient) {
//		this.restClient=restClient;
//	}

	public ProductDTO getProductById(Long id) {
		Optional<Product> product = productRepository.findById(id);
		ProductDTO productDTO = null;
		if (product.isPresent()) {

			ProductMapper mapper = new ProductMapper();
			productDTO = mapper.convertProductToProductDTO(product.get());
//			 Long tax= restClient.getTax(productDTO.getProductName());
//			 productDTO.setTax(tax);
		}

		return productDTO;
	}

	public ProductDTO createProduct(ProductDTO dto) {

		ProductMapper mapper = new ProductMapper();
		Product product = mapper.convertProductDTOToProduct(dto);

		Product product1 = productRepository.save(product);
		return mapper.convertProductToProductDTO(product1);

	}

	public void deleteProduct(Long id) {
		productRepository.delete(productRepository.findById(id).get());

	}

	public ProductDTO getProductByName(String name) {
		Product product = productRepository.findByProductName(name);
		ProductMapper mapper = new ProductMapper();
		return mapper.convertProductToProductDTO(product);

	}

	public ConversionDTO addFactor(ConversionDTO dto) {
		// TODO Auto-generated method stub

		ConversionMApper mapper = new ConversionMApper();
		Conversion conversion = mapper.convertConversionDTOToConversion(dto);

		Conversion convert = repo.save(conversion);
		return mapper.convertConversionToConversionDTO(convert);

	}

	public ResponseEntity<ConversionDTO> getDetails(String countryCode) {
		// TODO Auto-generated method stub
		

		Optional<Conversion> conversion = productRepository.findById(countryCode);
		ConversionDTO dto = null;
		if (conversion.isPresent()) {

			ProductMapper mapper = new ProductMapper();
			dto = mapper.convertConversionToConversionDTO(conversion.get());
//			 Long tax= restClient.getTax(productDTO.getProductName());
//			 productDTO.setTax(tax);
		}

		return productDTO;
	
		
		
		return null;
	}
}
